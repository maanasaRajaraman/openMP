// Parallel Histogram Calculation
#include <stdio.h> 
#include <stdlib.h> 
#include <omp.h> 
 
#define N 1000000 
#define BINS 10 
 
int main() { 
    int arr[N]; 
    int histogram[BINS] = {0}; 
 
    // Initialize array with random values 
    for (int i = 0; i < N; i++) { 
        arr[i] = rand() % BINS; 
    } 
 
    double start_time = omp_get_wtime(); 
 
    #pragma omp parallel for 
    for (int i = 0; i < N; i++) { 
        #pragma omp atomic 
        histogram[arr[i]]++; 
    } 
 
    double end_time = omp_get_wtime(); 
 
    printf("Histogram:\n"); 
    for (int i = 0; i < BINS; i++) { 
        printf("Bin %d: %d\n", i, histogram[i]); 
    } 
    printf("Time taken: %f seconds\n", end_time - start_time); 
 
    return 0; 
}

// Parallel Sieve of Eratosthenes
#include <stdio.h> 
#include <stdlib.h> 
#include <omp.h> 
#include <math.h> 
 
#define N 1000000 
 
void sieve(int primes[N]) { 
    #pragma omp parallel for 
    for (int i = 2; i <= sqrt(N); i++) { 
        if (primes[i]) { 
            for (int j = i * i; j < N; j += i) { 
                primes[j] = 0; 
            } 
        } 
    } 
} 
 
int main() { 
    int primes[N]; 
    for (int i = 0; i < N; i++) { 
        primes[i] = 1; 
    } 
    primes[0] = primes[1] = 0; 
 
    double start_time = omp_get_wtime(); 
    sieve(primes); 
    double end_time = omp_get_wtime(); 
 
    printf("Primes up to %d:\n", N); 
    for (int i = 2; i < N; i++) { 
        if (primes[i]) { 
            printf("%d ", i); 
        } 
    } 
    printf("\nTime taken: %f seconds\n", end_time - start_time); 
 
    return 0; 
}

//
