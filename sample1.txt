// Parallel Reduction for Maximum Value
#include <stdio.h> 
#include <stdlib.h> 
#include <omp.h> 
 
#define N 1000000 
 
int main() { 
    int arr[N]; 
    int max_val = -1; 
 
    // Initialize array with random values 
    for (int i = 0; i < N; i++) { 
        arr[i] = rand() % 1000000; 
    } 
 
    double start_time = omp_get_wtime(); 
 
    #pragma omp parallel for reduction(max:max_val) 
    for (int i = 0; i < N; i++) { 
        if (arr[i] > max_val) { 
            max_val = arr[i]; 
        } 
    } 
 
    double end_time = omp_get_wtime(); 
 
    printf("Maximum value: %d\n", max_val); 
    printf("Time taken: %f seconds\n", end_time - start_time); 
 
    return 0; 
} 
//========================================
//Parallel Prefix Sum
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define N 1000000

// Sequential prefix sum
void prefix_sum_sequential(int arr[N], int prefix[N]) {
    prefix[0] = arr[0];
    for (int i = 1; i < N; i++) {
        prefix[i] = prefix[i - 1] + arr[i];
    }
}

// Parallel prefix sum using OpenMP
void prefix_sum_parallel(int arr[N], int prefix[N]) {
    int num_threads;

    #pragma omp parallel
    {
        int id = omp_get_thread_num();
        int nthrds = omp_get_num_threads();

        #pragma omp single
        num_threads = nthrds;

        int chunk_size = N / nthrds;
        int start = id * chunk_size;
        int end = (id == nthrds - 1) ? N : (start + chunk_size);

        // Local prefix sum for each thread
        prefix[start] = arr[start];
        for (int i = start + 1; i < end; i++) {
            prefix[i] = prefix[i - 1] + arr[i];
        }
    }

    // Accumulate sums from previous threads
    for (int t = 1; t < num_threads; t++) {
        int offset = t * (N / num_threads);
        int add_value = prefix[offset - 1];

        #pragma omp parallel for
        for (int i = offset; i < (t == num_threads - 1 ? N : offset + (N / num_threads)); i++) {
            prefix[i] += add_value;
        }
    }
}

int main() {
    int arr[N], prefix_seq[N], prefix_par[N];

    // Initialize array with random values
    for (int i = 0; i < N; i++) {
        arr[i] = rand() % 10;
    }

    double start_time, end_time;

    // Sequential Prefix Sum
    start_time = omp_get_wtime();
    prefix_sum_sequential(arr, prefix_seq);
    end_time = omp_get_wtime();
    printf("Sequential Time: %f seconds\n", end_time - start_time);

    // Parallel Prefix Sum
    start_time = omp_get_wtime();
    prefix_sum_parallel(arr, prefix_par);
    end_time = omp_get_wtime();
    printf("Parallel Time: %f seconds\n", end_time - start_time);

    // Validation
    for (int i = 0; i < N; i++) {
        if (prefix_seq[i] != prefix_par[i]) {
            printf("Mismatch at index %d!\n", i);
            return 1;
        }
    }

    printf("Prefix sums match!\n");

    return 0;
}

//-----------------------------------------
// Parallel Breadth-First Search (BFS)
#include <stdio.h> 
#include <stdlib.h> 
#include <omp.h> 
 
#define N 1000 
 
int graph[N][N]; 
int visited[N]; 
 
void bfs(int start) { 
    int queue[N]; 
    int front = 0, rear = 0; 
 
    queue[rear++] = start; 
    visited[start] = 1; 
 
    while (front < rear) { 
        int node = queue[front++]; 
 
        #pragma omp parallel for 
        for (int i = 0; i < N; i++) { 
            if (graph[node][i] && !visited[i]) { 
                #pragma omp critical 
                { 
                    queue[rear++] = i; 
                    visited[i] = 1; 
                } 
            } 
        } 
    } 
} 
 
int main() { 
    // Initialize graph with random edges 
    for (int i = 0; i < N; i++) { 
        for (int j = 0; j < N; j++) { 
            graph[i][j] = rand() % 2; 
        } 
    } 
 
    double start_time = omp_get_wtime(); 
    bfs(0); 
    double end_time = omp_get_wtime(); 
 
    printf("Time taken: %f seconds\n", end_time - start_time); 
 
    return 0;
}
//-----------------------------------
// Parallel Floyd Warshall Algorithm
#include <stdio.h> 
#include <stdlib.h> 
#include <omp.h> 
 
#define N 1000 
#define INF 99999 
 
void floydWarshall(int dist[N][N]) { 
    #pragma omp parallel for 
    for (int k = 0; k < N; k++) { 
        for (int i = 0; i < N; i++) { 
            for (int j = 0; j < N; j++) { 
                if (dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j]; 
                } 
            } 
        } 
    } 
} 
 
int main() { 
    int dist[N][N]; 
 
    // Initialize distance matrix with random values 
    for (int i = 0; i < N; i++) { 
        for (int j = 0; j < N; j++) { 
            if (i == j) { 
                dist[i][j] = 0; 
            } else { 
                dist[i][j] = rand() % 100; 
                if (dist[i][j] == 0) { 
                    dist[i][j] = INF; 
                } 
            } 
        } 
    } 
 
    double start_time = omp_get_wtime(); 
    floydWarshall(dist); 
    double end_time = omp_get_wtime(); 
 
    printf("Time taken: %f seconds\n", end_time - start_time); 
 
    return 0; 
} 
//-------------------------------------
// 1) Word Count in a Large Text File
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <omp.h>

int word_count(FILE *file) {
    int count = 0;
    char ch, prev = ' ';
    while ((ch = fgetc(file)) != EOF) {
        if (isspace(ch) && !isspace(prev)) {
            count++;
        }
        prev = ch;
    }
    return count;
}
//-----------------------------------------------------------
// 2) Solving a Triangular System (Lower Triangular Matrix)
void solve_lower_triangular(int n, double L[n][n], double b[n], double x[n]) {
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        double sum = 0;
        for (int j = 0; j < i; j++) {
            sum += L[i][j] * x[j];
        }
        x[i] = (b[i] - sum) / L[i][i];
    }
}

// 3) Factorial Calculation Using OpenMP Tasks
unsigned long long factorial(int n) {
    if (n <= 1) return 1;
    unsigned long long res1, res2;

    #pragma omp task shared(res1)
    res1 = factorial(n / 2);

    #pragma omp task shared(res2)
    res2 = factorial(n - n / 2);

    #pragma omp taskwait
    return res1 * res2;
}
//------------------------------------------
// 4) Dot Product of Two Vectors
void dot_product(int *A, int *B, int n) {
    int result = 0;

    #pragma omp parallel for reduction(+:result)
    for (int i = 0; i < n; i++) {
        result += A[i] * B[i];
    }

    printf("Dot Product: %d\n", result);
}

int main() {
    // Word Count
    FILE *file = fopen("large_text.txt", "r");
    if (file) {
        int count = word_count(file);
        printf("Word Count: %d\n", count);
        fclose(file);
    }

    // Solving Triangular System
    int n = 3;
    double L[3][3] = {{2, 0, 0}, {3, 1, 0}, {1, -1, 1}};
    double b[3] = {4, 5, 6};
    double x[3];
    solve_lower_triangular(n, L, b, x);
    printf("Solution of Triangular System: ");
    for (int i = 0; i < n; i++) printf("%lf ", x[i]);
    printf("\n");

    // Factorial Calculation
    int num = 5;
    unsigned long long fact;
    #pragma omp parallel
    {
        #pragma omp single
        fact = factorial(num);
    }
    printf("Factorial of %d: %llu\n", num, fact);

    // Dot Product
    int A[5] = {1, 2, 3, 4, 5};
    int B[5] = {5, 4, 3, 2, 1};
    dot_product(A, B, 5);

    return 0;
}

-------------------------
// Parallel Histogram Calculation
#include <stdio.h> 
#include <stdlib.h> 
#include <omp.h> 
 
#define N 1000000 
#define BINS 10 
 
int main() { 
    int arr[N]; 
    int histogram[BINS] = {0}; 
 
    // Initialize array with random values 
    for (int i = 0; i < N; i++) { 
        arr[i] = rand() % BINS; 
    } 
 
    double start_time = omp_get_wtime(); 
 
    #pragma omp parallel for 
    for (int i = 0; i < N; i++) { 
        #pragma omp atomic 
        histogram[arr[i]]++; 
    } 
 
    double end_time = omp_get_wtime(); 
 
    printf("Histogram:\n"); 
    for (int i = 0; i < BINS; i++) { 
        printf("Bin %d: %d\n", i, histogram[i]); 
    } 
    printf("Time taken: %f seconds\n", end_time - start_time); 
 
    return 0; 
}
//--------------------------------
// Parallel Sieve of Eratosthenes
#include <stdio.h> 
#include <stdlib.h> 
#include <omp.h> 
#include <math.h> 
 
#define N 1000000 
 
void sieve(int primes[N]) { 
    #pragma omp parallel for 
    for (int i = 2; i <= sqrt(N); i++) { 
        if (primes[i]) { 
            for (int j = i * i; j < N; j += i) { 
                primes[j] = 0; 
            } 
        } 
    } 
} 
 
int main() { 
    int primes[N]; 
    for (int i = 0; i < N; i++) { 
        primes[i] = 1; 
    } 
    primes[0] = primes[1] = 0; 
 
    double start_time = omp_get_wtime(); 
    sieve(primes); 
    double end_time = omp_get_wtime(); 
 
    printf("Primes up to %d:\n", N); 
    for (int i = 2; i < N; i++) { 
        if (primes[i]) { 
            printf("%d ", i); 
        } 
    } 
    printf("\nTime taken: %f seconds\n", end_time - start_time); 
 
    return 0; 
}

