// Parallel DFS using OpenMP
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define MAX 100  // Maximum number of vertices

int graph[MAX][MAX]; // Adjacency matrix
int visited[MAX];    // Visited array
int V;               // Number of vertices
// DFS Function
void dfs(int v) {
    #pragma omp critical
    {
        if (visited[v]) return; // Avoid revisiting nodes
        visited[v] = 1;
        printf("Visited %d\n", v);
    }
    #pragma omp parallel for
    for (int i = 0; i < V; i++) {
        if (graph[v][i] && !visited[i]) {
            #pragma omp task
            dfs(i);
        }
    }
    #pragma omp taskwait // Wait for all tasks to complete
}
int main() {
    int E, u, v; // E: number of edges
    printf("Enter the number of vertices: ");
    scanf("%d", &V);
    printf("Enter the number of edges: ");
    scanf("%d", &E);
    // Initialize adjacency matrix and visited array
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            graph[i][j] = 0;
        }
        visited[i] = 0;
    }
    // Input edges
    printf("Enter edges (format: u v):\n");
    for (int i = 0; i < E; i++) {
        scanf("%d %d", &u, &v);
        graph[u][v] = 1;
        graph[v][u] = 1; // Assuming undirected graph
    }
    int start_vertex;
    printf("Enter the starting vertex for DFS: ");
    scanf("%d", &start_vertex);
    double start_time = omp_get_wtime();
    #pragma omp parallel
    {
        #pragma omp single
        dfs(start_vertex);
    }
    double end_time = omp_get_wtime();
    printf("DFS completed in %f seconds\n", end_time - start_time);
    return 0;
}

//-----------------------------------
// M-Coloring Problem using OpenMP
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <omp.h>

#define V 4  // Number of vertices in the graph

// Function to check if the current color assignment is safe
bool is_safe(int v, int graph[V][V], int color[], int c) {
    for (int i = 0; i < V; i++) {
        if (graph[v][i] && color[i] == c) {
            return false;
        }
    }
    return true;
}

// Recursive utility function for m-coloring problem (sequential)
bool graph_coloring_util(int graph[V][V], int m, int color[], int v) {
    if (v == V) {
        return true;
    }

    for (int c = 1; c <= m; c++) {
        if (is_safe(v, graph, color, c)) {
            color[v] = c;
            if (graph_coloring_util(graph, m, color, v + 1)) {
                return true;
            }
            color[v] = 0;  // Backtrack
        }
    }
    return false;
}

// Parallel version using OpenMP
bool graph_coloring_parallel(int graph[V][V], int m, int color[]) {
    bool found_solution = false;

    #pragma omp parallel for shared(found_solution)
    for (int c = 1; c <= m; c++) {
        if (found_solution) continue;  // Early termination if solution is found

        int temp_color[V] = {0};
        temp_color[0] = c;

        if (is_safe(0, graph, temp_color, c)) {
            if (graph_coloring_util(graph, m, temp_color, 1)) {
                #pragma omp critical
                {
                    if (!found_solution) {
                        for (int i = 0; i < V; i++) {
                            color[i] = temp_color[i];
                        }
                        found_solution = true;
                    }
                }
            }
        }
    }

    return found_solution;
}

// Function to print the solution
void print_solution(int color[]) {
    printf("Solution Exists: Following are the assigned colors:\n");
    for (int i = 0; i < V; i++) {
        printf("Vertex %d -> Color %d\n", i, color[i]);
    }
}
int main() {
    int graph[V][V] = {
        {0, 1, 1, 1},
        {1, 0, 1, 0},
        {1, 1, 0, 1},
        {1, 0, 1, 0}
    };
    int m = 3;  // Number of colors
    int color[V] = {0};

    double start = omp_get_wtime();
    bool result = graph_coloring_parallel(graph, m, color);
    double end = omp_get_wtime();
    if (result) {
        print_solution(color);
    } else {
        printf("No solution exists.\n");
    }
    printf("Execution Time: %f seconds\n", end - start);
    return 0;
}
//--------------------------------------
//Bankers algorithm
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define P 5 // Number of processes
#define R 3 // Number of resources

int available[R] = {3, 3, 2};
int max[P][R] = {{7, 5, 3}, {3, 2, 2}, {9, 0, 2}, {2, 2, 2}, {4, 3, 3}};
int allocation[P][R] = {{0, 1, 0}, {2, 0, 0}, {3, 0, 2}, {2, 1, 1}, {0, 0, 2}};
int need[P][R];

// Function to calculate the Need matrix
void calculate_need() {
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}

// Sequential Banker's Algorithm
void bankers_sequential() {
    int finish[P] = {0};
    int work[R];
    for (int i = 0; i < R; i++) work[i] = available[i];

    printf("\nSequential Safe Sequence: ");
    for (int count = 0; count < P; count++) {
        for (int i = 0; i < P; i++) {
            if (!finish[i]) {
                int flag = 1;
                for (int j = 0; j < R; j++) {
                    if (need[i][j] > work[j]) {
                        flag = 0;
                        break;
                    }
                }
                if (flag) {
                    for (int k = 0; k < R; k++) work[k] += allocation[i][k];
                    finish[i] = 1;
                    printf("P%d ", i);
                    break;
                }
            }
        }
    }
    printf("\n");
}

// Parallel Banker's Algorithm using OpenMP
void bankers_parallel() {
    int finish[P] = {0};
    int work[R];
    for (int i = 0; i < R; i++) work[i] = available[i];

    printf("\nParallel Safe Sequence: ");
    for (int count = 0; count < P; count++) {
        #pragma omp parallel for
        for (int i = 0; i < P; i++) {
            if (!finish[i]) {
                int flag = 1;
                for (int j = 0; j < R; j++) {
                    if (need[i][j] > work[j]) {
                        flag = 0;
                        break;
                    }
                }
                if (flag) {
                    #pragma omp critical
                    {
                        for (int k = 0; k < R; k++) work[k] += allocation[i][k];
                        finish[i] = 1;
                        printf("P%d ", i);
                    }
                }
            }
        }
    }
    printf("\n");
}
int main() {
    calculate_need();

    printf("Banker's Algorithm for Deadlock Avoidance\n");
    bankers_sequential();
    bankers_parallel();

    return 0;
}
//-----------------------------------------------------------

//concurrency problems
// 1) Dining Philosophers Problem
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <unistd.h>
#include <time.h>

#define N 5

omp_lock_t forks[N];

void dining_philosophers_sequential() {
    for (int id = 0; id < N; id++) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(1);

        printf("Philosopher %d is eating.\n", id);
        sleep(1);
    }
}

void dining_philosophers_parallel() {
    #pragma omp parallel num_threads(N)
    {
        int id = omp_get_thread_num();
        int left = id;
        int right = (id + 1) % N;

        printf("Philosopher %d is thinking.\n", id);
        sleep(1);

        omp_set_lock(&forks[left]);
        omp_set_lock(&forks[right]);

        printf("Philosopher %d is eating.\n", id);
        sleep(1);

        omp_unset_lock(&forks[left]);
        omp_unset_lock(&forks[right]);
    }
}

// 2) Producer-Consumer Model
#define BUFFER_SIZE 5
int buffer[BUFFER_SIZE], count = 0;
omp_lock_t buffer_lock;

void producer_consumer_sequential() {
    for (int i = 0; i < 10; i++) {
        if (count < BUFFER_SIZE) {
            buffer[count++] = i;
            printf("Produced: %d\n", i);
        }
        sleep(1);

        if (count > 0) {
            printf("Consumed: %d\n", buffer[--count]);
        }
        sleep(2);
    }
}

void producer_consumer_parallel() {
    #pragma omp parallel sections
    {
        #pragma omp section
        {
            for (int i = 0; i < 10; i++) {
                omp_set_lock(&buffer_lock);
                if (count < BUFFER_SIZE) {
                    buffer[count++] = i;
                    printf("Produced: %d\n", i);
                }
                omp_unset_lock(&buffer_lock);
                sleep(1);
            }
        }

        #pragma omp section
        {
            for (int i = 0; i < 10; i++) {
                omp_set_lock(&buffer_lock);
                if (count > 0) {
                    printf("Consumed: %d\n", buffer[--count]);
                }
                omp_unset_lock(&buffer_lock);
                sleep(2);
            }
        }
    }
}

// 3) Readers-Writers Problem
int read_count = 0;
omp_lock_t read_lock, write_lock;

void readers_writers_sequential() {
    for (int i = 0; i < 5; i++) {
        printf("Reader %d is reading.\n", i);
        sleep(1);

        printf("Writer %d is writing.\n", i);
        sleep(2);
    }
}

void readers_writers_parallel() {
    #pragma omp parallel sections
    {
        #pragma omp section
        {
            for (int i = 0; i < 5; i++) {
                omp_set_lock(&read_lock);
                read_count++;
                if (read_count == 1) omp_set_lock(&write_lock);
                omp_unset_lock(&read_lock);

                printf("Reader %d is reading.\n", i);
                sleep(1);

                omp_set_lock(&read_lock);
                read_count--;
                if (read_count == 0) omp_unset_lock(&write_lock);
                omp_unset_lock(&read_lock);
                sleep(1);
            }
        }

        #pragma omp section
        {
            for (int i = 0; i < 5; i++) {
                omp_set_lock(&write_lock);
                printf("Writer %d is writing.\n", i);
                sleep(2);
                omp_unset_lock(&write_lock);
                sleep(1);
            }
        }
    }
}

// 4) Sleeping Barber Problem
#define CHAIRS 3
int waiting_customers = 0;
omp_lock_t barber_lock, customer_lock;

void sleeping_barber_sequential() {
    for (int i = 0; i < 10; i++) {
        printf("Customer %d is waiting.\n", i);
        sleep(1);

        printf("Barber is cutting hair.\n");
        sleep(2);
    }
}

void sleeping_barber_parallel() {
    #pragma omp parallel sections
    {
        #pragma omp section
        {
            while (1) {
                omp_set_lock(&barber_lock);
                if (waiting_customers > 0) {
                    waiting_customers--;
                    printf("Barber is cutting hair.\n");
                    sleep(2);
                } else {
                    printf("Barber is sleeping.\n");
                }
                omp_unset_lock(&barber_lock);
                sleep(1);
            }
        }

        #pragma omp section
        {
            for (int i = 0; i < 10; i++) {
                omp_set_lock(&customer_lock);
                if (waiting_customers < CHAIRS) {
                    waiting_customers++;
                    printf("Customer %d is waiting.\n", i);
                } else {
                    printf("Customer %d left because of no chair.\n", i);
                }
                omp_unset_lock(&customer_lock);
                sleep(1);
            }
        }
    }
}

int main() {
    for (int i = 0; i < N; i++) omp_init_lock(&forks[i]);
    omp_init_lock(&buffer_lock);
    omp_init_lock(&read_lock);
    omp_init_lock(&write_lock);
    omp_init_lock(&barber_lock);
    omp_init_lock(&customer_lock);

    clock_t start, end;

    printf("1) Dining Philosophers Problem:\n");
    start = clock();
    dining_philosophers_sequential();
    end = clock();
    printf("Sequential Time: %lf seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    start = clock();
    dining_philosophers_parallel();
    end = clock();
    printf("Parallel Time: %lf seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    printf("\n2) Producer-Consumer Model:\n");
    start = clock();
    producer_consumer_sequential();
    end = clock();
    printf("Sequential Time: %lf seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    start = clock();
    producer_consumer_parallel();
    end = clock();
    printf("Parallel Time: %lf seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    printf("\n3) Readers-Writers Problem:\n");
    start = clock();
    readers_writers_sequential();
    end = clock();
    printf("Sequential Time: %lf seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    start = clock();
    readers_writers_parallel();
    end = clock();
    printf("Parallel Time: %lf seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    printf("\n4) Sleeping Barber Problem:\n");
    start = clock();
    sleeping_barber_sequential();
    end = clock();
    printf("Sequential Time: %lf seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    start = clock();
    sleeping_barber_parallel();
    end = clock();
    printf("Parallel Time: %lf seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    return 0;
}

//-------------------
// gamma encoding
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <time.h>
#include <string.h>

#define ITERATION_COUNT 1000
#define FIRST_SYMBOL 'A'
#define SYMBOL_NUMBER 26

void gammaEncodingSequential(char* input, char* gamma, char* result)
{
    int j = 0;
    int Ti, Gi;
    char BUFF;
    int input_length = strlen(input);
    int gamma_length = strlen(gamma);

    for (int i = 0; i < ITERATION_COUNT; i++)
    {
        if (j == gamma_length - 1)
            j = 0;

        Ti = input[i % input_length] - FIRST_SYMBOL;
        Gi = gamma[j] - FIRST_SYMBOL;

        BUFF = FIRST_SYMBOL + (Ti + Gi) % SYMBOL_NUMBER;
        result[i] = BUFF;
        j++;
    }
    result[ITERATION_COUNT] = '\0';
}

void gammaEncodingParallel(char* input, char* gamma, char* result)
{
    int Ti, Gi;
    char BUFF;
    int input_length = strlen(input);
    int gamma_length = strlen(gamma);

    #pragma omp parallel for private(Ti, Gi, BUFF)
    for (int i = 0; i < ITERATION_COUNT; i++)
    {
        int j = i % gamma_length;  // Ensure j cycles correctly in parallel

        Ti = input[i % input_length] - FIRST_SYMBOL;
        Gi = gamma[j] - FIRST_SYMBOL;

        BUFF = FIRST_SYMBOL + (Ti + Gi) % SYMBOL_NUMBER;

        result[i] = BUFF;
    }
    result[ITERATION_COUNT] = '\0';
}

int main() {
    char input[] = "HELLO";
    char gamma[] = "KEY";
    char result_seq[ITERATION_COUNT + 1];
    char result_par[ITERATION_COUNT + 1];

    clock_t start, end;

    // Sequential execution
    start = clock();
    gammaEncodingSequential(input, gamma, result_seq);
    end = clock();
    double time_seq = (double)(end - start) / CLOCKS_PER_SEC;

    // Parallel execution
    start = clock();
    gammaEncodingParallel(input, gamma, result_par);
    end = clock();
    double time_par = (double)(end - start) / CLOCKS_PER_SEC;

    printf("Sequential Encoded Result: %s\n", result_seq);
    printf("Parallel Encoded Result:   %s\n", result_par);
    printf("\nTime taken (Sequential): %lf seconds\n", time_seq);
    printf("Time taken (Parallel):   %lf seconds\n", time_par);

    return 0;
}
//------------------------------
// 1) Dijkstra's Algorithm
#include <stdio.h>
#include <limits.h>
#include <omp.h>
#define V 5

int minDistance(int dist[], int sptSet[]) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++)
        if (sptSet[v] == 0 && dist[v] <= min)
            min = dist[v], min_index = v;
    return min_index;
}

void dijkstra_sequential(int graph[V][V], int src, int dist[V]) {
    int sptSet[V] = {0};
    for (int i = 0; i < V; i++) dist[i] = INT_MAX;
    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet);
        sptSet[u] = 1;

        for (int v = 0; v < V; v++)
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }
}

void dijkstra_parallel(int graph[V][V], int src, int dist[V]) {
    int sptSet[V] = {0};
    for (int i = 0; i < V; i++) dist[i] = INT_MAX;
    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet);
        sptSet[u] = 1;

        #pragma omp parallel for
        for (int v = 0; v < V; v++)
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }
}

int main() {
    int graph[V][V] = {
        {0, 6, 0, 1, 0},
        {6, 0, 5, 2, 2},
        {0, 5, 0, 0, 5},
        {1, 2, 0, 0, 1},
        {0, 2, 5, 1, 0}
    };
    int dist_seq[V], dist_par[V];

    double start, end;

    start = omp_get_wtime();
    dijkstra_sequential(graph, 0, dist_seq);
    end = omp_get_wtime();
    printf("Sequential Time: %f seconds\n", end - start);

    start = omp_get_wtime();
    dijkstra_parallel(graph, 0, dist_par);
    end = omp_get_wtime();
    printf("Parallel Time: %f seconds\n", end - start);

    for (int i = 0; i < V; i++) {
        printf("Vertex %d: Seq = %d, Par = %d\n", i, dist_seq[i], dist_par[i]);
    }

    return 0;
}
//-----------------------------------------
// 2) Longest Common Subsequence (LCS)
#include <stdio.h>
#include <string.h>
#include <omp.h>
#include <time.h>

#define MAX 1000

// Sequential LCS
int lcs_sequential(char* X, char* Y, int m, int n) {
    int dp[MAX][MAX];

    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= n; j++) {
            if (i == 0 || j == 0)
                dp[i][j] = 0;
            else if (X[i - 1] == Y[j - 1])
                dp[i][j] = dp[i - 1][j - 1] + 1;
            else
                dp[i][j] = (dp[i - 1][j] > dp[i][j - 1]) ? dp[i - 1][j] : dp[i][j - 1];
        }
    }
    return dp[m][n];
}
//---------------------------------------
// Parallel LCS using OpenMP
int lcs_parallel(char* X, char* Y, int m, int n) {
    int dp[MAX][MAX];

    // Initialize first row and column
    for (int i = 0; i <= m; i++) dp[i][0] = 0;
    for (int j = 0; j <= n; j++) dp[0][j] = 0;

    // Diagonal (wavefront) parallelization
    for (int k = 2; k <= m + n; k++) {
        #pragma omp parallel for
        for (int i = 1; i <= m; i++) {
            int j = k - i;
            if (j >= 1 && j <= n) {
                if (X[i - 1] == Y[j - 1])
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                else
                    dp[i][j] = (dp[i - 1][j] > dp[i][j - 1]) ? dp[i - 1][j] : dp[i][j - 1];
            }
        }
    }
    return dp[m][n];
}

int main() {
    char X[] = "AGGTAB";
    char Y[] = "GXTXAYB";
    int m = strlen(X);
    int n = strlen(Y);

    double start, end;

    // Sequential Execution
    start = omp_get_wtime();
    int lcs_seq = lcs_sequential(X, Y, m, n);
    end = omp_get_wtime();
    printf("Sequential LCS Length: %d\n", lcs_seq);
    printf("Sequential Time: %f seconds\n", end - start);

    // Parallel Execution
    start = omp_get_wtime();
    int lcs_par = lcs_parallel(X, Y, m, n);
    end = omp_get_wtime();
    printf("Parallel LCS Length: %d\n", lcs_par);
    printf("Parallel Time: %f seconds\n", end - start);

    return 0;
}
//---------------------------------------
//integration

#include <stdio.h>
#include <omp.h>
#include <math.h>

#define INTERVALS 1000000
#define A 0.0  // Lower limit
#define B 1.0  // Upper limit

// Function to integrate
double f(double x) {
    return x * x;  // Example: f(x) = x^2
}

// Sequential Trapezoidal Rule
double trapezoidal_sequential(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = (f(a) + f(b)) / 2.0;

    for (int i = 1; i < n; i++) {
        sum += f(a + i * h);
    }

    return sum * h;
}

// Parallel Trapezoidal Rule using OpenMP
double trapezoidal_parallel(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = (f(a) + f(b)) / 2.0;

    #pragma omp parallel for reduction(+:sum)
    for (int i = 1; i < n; i++) {
        sum += f(a + i * h);
    }

    return sum * h;
}

int main() {
    double start, end;

    // Sequential Execution
    start = omp_get_wtime();
    double result_seq = trapezoidal_sequential(A, B, INTERVALS);
    end = omp_get_wtime();
    printf("Sequential Result: %lf\n", result_seq);
    printf("Sequential Time: %f seconds\n", end - start);

    // Parallel Execution
    start = omp_get_wtime();
    double result_par = trapezoidal_parallel(A, B, INTERVALS);
    end = omp_get_wtime();
    printf("Parallel Result: %lf\n", result_par);
    printf("Parallel Time: %f seconds\n", end - start);

    return 0;
}
//--------------------------------
// n queens
// 4) N-Queens Problem (Backtracking)
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define N 8  // Change this for different board sizes

// Check if a queen can be placed
int is_safe(int board[N][N], int row, int col) {
    int i, j;
    for (i = 0; i < col; i++)
        if (board[row][i]) return 0;

    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j]) return 0;

    for (i = row, j = col; i < N && j >= 0; i++, j--)
        if (board[i][j]) return 0;

    return 1;
}

// Sequential N-Queens Solver
int solve_nqueens_sequential(int board[N][N], int col) {
    if (col >= N) return 1;

    int solutions = 0;
    for (int i = 0; i < N; i++) {
        if (is_safe(board, i, col)) {
            board[i][col] = 1;
            solutions += solve_nqueens_sequential(board, col + 1);
            board[i][col] = 0;
        }
    }
    return solutions;
}

// Parallel N-Queens Solver using OpenMP
int solve_nqueens_parallel() {
    int solutions = 0;

    #pragma omp parallel for reduction(+:solutions)
    for (int i = 0; i < N; i++) {
        int board[N][N] = {0};
        board[i][0] = 1;
        solutions += solve_nqueens_sequential(board, 1);
    }
    return solutions;
}

int main() {
    int board[N][N] = {0};
    double start, end;

    // Sequential Execution
    start = omp_get_wtime();
    int seq_solutions = solve_nqueens_sequential(board, 0);
    end = omp_get_wtime();
    printf("Sequential Solutions: %d\n", seq_solutions);
    printf("Sequential Time: %f seconds\n", end - start);

    // Parallel Execution
    start = omp_get_wtime();
    int par_solutions = solve_nqueens_parallel();
    end = omp_get_wtime();
    printf("Parallel Solutions: %d\n", par_solutions);
    printf("Parallel Time: %f seconds\n", end - start);

    return 0;
}
//------------------------
// 5) Calculate Area of Mandelbrot Set using OpenMP (Race Condition-Free)
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <complex.h>

#define WIDTH 1000
#define HEIGHT 1000
#define MAX_ITER 1000
#define X_MIN -2.0
#define X_MAX 1.0
#define Y_MIN -1.5
#define Y_MAX 1.5

// Function to check if a point belongs to the Mandelbrot set
int mandelbrot(double real, double imag) {
    double complex c = real + imag * I;
    double complex z = 0;
    int iter = 0;

    while (cabs(z) <= 2.0 && iter < MAX_ITER) {
        z = z * z + c;
        iter++;
    }

    return iter == MAX_ITER;
}

// Sequential Mandelbrot Area Calculation
double mandelbrot_area_sequential() {
    int count = 0;
    double dx = (X_MAX - X_MIN) / WIDTH;
    double dy = (Y_MAX - Y_MIN) / HEIGHT;

    for (int i = 0; i < WIDTH; i++) {
        for (int j = 0; j < HEIGHT; j++) {
            double x = X_MIN + i * dx;
            double y = Y_MIN + j * dy;
            if (mandelbrot(x, y)) count++;
        }
    }

    return (double)count / (WIDTH * HEIGHT) * (X_MAX - X_MIN) * (Y_MAX - Y_MIN);
}

// Parallel Mandelbrot Area Calculation using OpenMP
double mandelbrot_area_parallel() {
    int count = 0;
    double dx = (X_MAX - X_MIN) / WIDTH;
    double dy = (Y_MAX - Y_MIN) / HEIGHT;

    #pragma omp parallel for reduction(+:count) collapse(2)
    for (int i = 0; i < WIDTH; i++) {
        for (int j = 0; j < HEIGHT; j++) {
            double x = X_MIN + i * dx;
            double y = Y_MIN + j * dy;
            if (mandelbrot(x, y)) count++;
        }
    }

    return (double)count / (WIDTH * HEIGHT) * (X_MAX - X_MIN) * (Y_MAX - Y_MIN);
}

int main() {
    double start, end;

    // Sequential Execution
    start = omp_get_wtime();
    double area_seq = mandelbrot_area_sequential();
    end = omp_get_wtime();
    printf("Sequential Mandelbrot Area: %lf\n", area_seq);
    printf("Sequential Time: %f seconds\n", end - start);

    // Parallel Execution
    start = omp_get_wtime();
    double area_par = mandelbrot_area_parallel();
    end = omp_get_wtime();
    printf("Parallel Mandelbrot Area: %lf\n", area_par);
    printf("Parallel Time: %f seconds\n", end - start);

    return 0;
}
//-------------------------------
// 7) Linear Congruential Generator (LCG)
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define NUM_RANDOM 100000000

// Parameters for LCG
#define MODULUS 2147483648 // 2^31
#define MULTIPLIER 1103515245
#define INCREMENT 12345

// Sequential Linear Congruential Generator
void lcg_sequential(unsigned int seed, unsigned int* random_numbers) {
    random_numbers[0] = seed;
    for (int i = 1; i < NUM_RANDOM; i++) {
        random_numbers[i] = (MULTIPLIER * random_numbers[i - 1] + INCREMENT) % MODULUS;
    }
}

// Parallel Linear Congruential Generator using OpenMP
void lcg_parallel(unsigned int seed, unsigned int* random_numbers) {
    #pragma omp parallel for
    for (int i = 0; i < NUM_RANDOM; i++) {
        random_numbers[i] = (MULTIPLIER * (seed + i) + INCREMENT) % MODULUS;
    }
}

int main() {
    unsigned int* random_seq = (unsigned int*)malloc(NUM_RANDOM * sizeof(unsigned int));
    unsigned int* random_par = (unsigned int*)malloc(NUM_RANDOM * sizeof(unsigned int));

    double start, end;
    unsigned int seed = 12345;

    // Sequential Execution
    start = omp_get_wtime();
    lcg_sequential(seed, random_seq);
    end = omp_get_wtime();
    printf("Sequential LCG Time: %f seconds\n", end - start);

    // Parallel Execution
    start = omp_get_wtime();
    lcg_parallel(seed, random_par);
    end = omp_get_wtime();
    printf("Parallel LCG Time: %f seconds\n", end - start);

    // Verification (compare first 5 values)
    printf("First 5 Sequential LCG Numbers: ");
    for (int i = 0; i < 5; i++) printf("%u ", random_seq[i]);
    printf("\n");

    printf("First 5 Parallel LCG Numbers:   ");
    for (int i = 0; i < 5; i++) printf("%u ", random_par[i]);
    printf("\n");

    free(random_seq);
    free(random_par);

    return 0;
}
